#!/bin/bash
# GCC package build script (written by volkerdi@slackware.com)
#
# Copyright 2003, 2004  Slackware Linux, Inc., Concord, California, USA
# Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Modified 2011 by Eric Hameleers <alien at slackware.com> for OpenJDK.

# Some notes, Fri May 16 12:31:32 PDT 2003:
#
# Why i486 and not i386?  Because the shared C++ libraries in gcc-3.2.x will
# require 486 opcodes even when a 386 target is used (so we already weren't
# compatible with the i386 for Slackware 9.0, didn't notice, and nobody
# complained :-).  gcc-3.3 fixes this issue and allows you to build a 386
# compiler, but the fix is done in a way that produces binaries that are not
# compatible with gcc-3.2.x compiled binaries.  To retain compatibility with
# Slackware 9.0, we'll have to use i486 (or better) as the compiler target
# for gcc-3.3.
#
# It's time to say goodbye to i386 support in Slackware.  I've surveyed 386
# usage online, and the most common thing I see people say when someone asks
# about running Linux on a 386 is to "run Slackware", but then they also 
# usually go on to say "be sure to get an OLD version, like 4.0, before glibc,
# because it'll be more efficient."  Now, if that's the general advice, then
# I see no reason to continue 386 support in the latest Slackware (and indeed
# it's no longer easily possible).

# Some more notes, Mon Aug  3 19:49:51 UTC 2015:
#
# Changing to -march=i586 for 32-bit x86 as several things (Mesa being one of
# them) no longer work if constrained to -march=i486.  We're not going to use
# -march=i686 since the only additional opcode is CMOV, which is actually less
# efficient on modern CPUs running in 32-bit mode than the alternate i586
# instructions.  No need to throw i586 CPUs under the bus (yet).

# Some more notes, Wed Aug 28 19:41:13 UTC 2024:
#
# Time to throw i586 CPUs and any others that lack SSE2 under the bus.
# Sorry, but upstream projects have begun to ignore -march= enough that there
# just isn't enough upside to try to keep things even at -march=i686 as a
# baseline. Might as well get some SIMD enhancement and quit killing
# performance in a futile attempt to support computers that are in landfills.

# Modified by Francisco Ambrozio - gcc13 package

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=gcc13
SRCVER=${VERSION:-$(echo gcc-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
VERSION=$(echo $SRCVER | cut -f 1 -d _)
MJRVER=$(echo $VERSION | cut -d. -f1)
BUILD=${BUILD:-1}

# Which compilers do we want to build?
LANGS=${LANGS:-'c,c++'}

# An optional tag for after the version number in the package's filename:
#VERTAG=_multilib

# An optional tag for after the build number in the package's filename:
TAG=_fco

# How many jobs to run in parallel:
NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i686 ;;
    arm*) readelf /usr/bin/file -A | grep -E -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# Try to figure out if we want multilib (or set MULTILIB= manually).
# BTW, --disable-multilib is only ever used on x86_64.
# Using it elsewhere will break the build.
if [ "$ARCH" = "x86_64" -a ! -L /lib/ld-linux.so.2 ]; then
  MULTILIB=${MULTILIB:-"--disable-multilib"}
else
  MULTILIB=${MULTILIB:-"--enable-multilib"}
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "${PKGNAM}-${VERSION}${VERTAG}-$ARCH-${BUILD}${TAG}.txz"
  exit 0
fi

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=pentium4 -mtune=generic"
  LIBDIRSUFFIX=""
  LIB_ARCH=i386
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -march=x86-64 -mtune=generic -fPIC"
  LIBDIRSUFFIX="64"
  LIB_ARCH=amd64
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
  LIB_ARCH=$ARCH
fi

case "$ARCH" in
    arm*) TARGET=$ARCH-slackware-linux-gnueabi ;;
    *)    TARGET=$ARCH-slackware-linux ;;
esac

# Temporary build location:
TMP=${TMP:-/tmp}

# Extract the source code:
cd $TMP
rm -rf gcc-$SRCVER
echo "Extracting $CWD/gcc-$SRCVER.tar.?z..."
tar xf $CWD/gcc-$SRCVER.tar.?z || exit 1

# This is the main DESTDIR target:
PKG=$TMP/package-$PKGNAM

# Clear the build locations:
rm -rf $PKG
mkdir -p $PKG/usr/doc/gcc-$VERSION

# Insert package descriptions:
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd gcc-$SRCVER || exit 1

# Apply any required patches:
for patch in $CWD/patches/*.patch $CWD/patches/*.diff ; do
  if [ -r "$patch" ]; then
    cat $patch | patch -p1 --verbose --backup --suffix=.orig || exit 1
  fi
done
for patch in $CWD/patches/*.patch.gz $CWD/patches/*.diff.gz ; do
  if [ -r "$patch" ]; then
    zcat $patch | patch -p1 --verbose --backup --suffix=.orig || exit 1
  fi
done

# Fix perms/owners:
chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 754 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 664 \) \
  -exec chmod 644 {} \+

# Install docs:
mkdir -p $PKG/usr/doc/gcc-$VERSION
cp -a \
  COPYING* ChangeLog* FAQ INSTALL \
  LAST_UPDATED MAINTAINERS NEWS \
  README* *.html \
$PKG/usr/doc/gcc-$VERSION

# We will keep part of these, but they are really big...
if [ -r ChangeLog ]; then
  DOCSDIR=$(echo $PKG/usr/doc/gcc-$VERSION)
  cat ChangeLog | head -n 1000 > $DOCSDIR/ChangeLog
  touch -r ChangeLog $DOCSDIR/ChangeLog
fi
if [ -r NEWS ]; then
  DOCSDIR=$(echo $PKG/usr/doc/gcc-$VERSION)
  cat NEWS | head -n 1500 > $DOCSDIR/NEWS
  touch -r NEWS $DOCSDIR/NEWS
fi

mkdir -p $PKG/usr/doc/gcc-${VERSION}/gcc
( cd gcc || exit 0
  cp -a \
    ABOUT* COPYING* DATESTAMP DEV-PHASE LANG* ONEWS README* SERVICE \
  $PKG/usr/doc/gcc-$VERSION/gcc
)
       
mkdir -p $PKG/usr/doc/gcc-${VERSION}/libgomp
( cd libgomp || exit 0
  if [ -r ChangeLog ]; then
    cat ChangeLog | head -n 1000 > $PKG/usr/doc/gcc-${VERSION}/libgomp/ChangeLog
    touch -r ChangeLog $PKG/usr/doc/gcc-${VERSION}/libgomp/ChangeLog
  fi
)
 
mkdir -p $PKG/usr/doc/gcc-${VERSION}/libstdc++-v3
( cd libstdc++-v3 || exit 0
  cp -a \
    README* \
    doc/html/faq.html \
  $PKG/usr/doc/gcc-${VERSION}/libstdc++-v3
  if [ -r ChangeLog ]; then
    cat ChangeLog | head -n 1000 > $PKG/usr/doc/gcc-${VERSION}/libstdc++-v3/ChangeLog
    touch -r ChangeLog $PKG/usr/doc/gcc-${VERSION}/libstdc++-v3/ChangeLog
  fi
)

# build gcc
( mkdir gcc.build.lnx
  cd gcc.build.lnx

  if [ "$ARCH" = "x86_64" ]; then
    GCC_ARCHOPTS="--with-arch=x86-64"
  else
    GCC_ARCHOPTS="--with-arch=$ARCH"
  fi
 
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  ../configure --prefix=/usr \
     --libdir=/usr/lib$LIBDIRSUFFIX \
     --mandir=/usr/man \
     --infodir=/usr/info \
     --enable-shared \
     --enable-bootstrap \
     --enable-languages=${LANGS} \
     --enable-threads=posix \
     --enable-checking=release \
     --with-system-zlib \
     --enable-libstdcxx-dual-abi \
     --with-default-libstdcxx-abi=new \
     --disable-libstdcxx-pch \
     --disable-libunwind-exceptions \
     --enable-__cxa_atexit \
     --disable-libssp \
     --enable-gnu-indirect-function \
     --enable-gnu-unique-object \
     --enable-plugin \
     --enable-lto \
     --disable-install-libiberty \
     --disable-werror \
     --with-gnu-ld \
     --with-isl \
     --verbose \
     --with-arch-directory=$LIB_ARCH \
     --disable-gtktest \
     --enable-clocale=gnu \
     $GCC_ARCHOPTS \
     $MULTILIB \
     --program-suffix=-${MJRVER} \
     --enable-version-specific-runtime-libs \
     --target=${TARGET} \
     --build=${TARGET} \
     --host=${TARGET} || exit 1

  # Start the build:

  # Include all debugging info (for now):
  make $NUMJOBS bootstrap || exit 1

  make info || exit 1

  # Set GCCCHECK=something to run the tests
  if [ ! -z $GCCCHECK ]; then
    make $NUMJOBS check || exit 1
  fi

  make install DESTDIR=$PKG || exit 1

  # Be sure the "specs" file is installed.
  if [ ! -r $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs ]; then
    cat stage1-gcc/specs > $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs
  fi

  # Make our 64bit gcc look for 32bit gcc binaries in ./32 subdirectory.
  # This is needed only for x86_64 + --disable-multilib.
  if [ "$ARCH" = "x86_64" -a "$MULTILIB" = "--disable-multilib" ]; then
    sed -i 's#;.\(:../lib !m64 m32;\)$#;32\1#' \
      $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs
  fi

  # make ada.install-common DESTDIR=$PKG1 || exit 1
  # make install-gnatlib DESTDIR=$PKG1 || exit 1
  make -i install-info DESTDIR=$PKG || exit 1

  # Move potentially conflicting stuff to version specific subdirectory:
  if [ -d $PKG/usr/lib${LIBDIRSUFFIX} ]; then
    mv $PKG/usr/lib${LIBDIRSUFFIX}/lib* $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/
  fi
  if [ -d $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/lib${LIBDIRSUFFIX}/ ]; then
    mv $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/lib${LIBDIRSUFFIX}/lib* $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/
  fi

  chmod 755 $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/lib/libgcc_s.so.1

  # Fix stuff up:
  ( cd $PKG/usr/info
    rm dir
    for eachinfo in *.info ; do
      mv $eachinfo $(basename $eachinfo .info)-${MJRVER}.info
    done
    gzip -9 *
  )

  ( cd $PKG/usr/bin
    cat $CWD/c89.sh > c89-$MJRVER
    cat $CWD/c99.sh > c99-$MJRVER
    chmod 755 c89-$MJRVER c99-$MJRVER
  )

  ( cd $PKG/usr/man
    rm -r man7
    gzip -9 */*
    cd man1
    ln -sf g++-${MJRVER}.1.gz c++-${MJRVER}.1.gz
    ln -sf gcc-${MJRVER}.1.gz cc-${MJRVER}.1.gz
  )

  ## build an all-in-one txz package:
  #(
  #  cd $PKG1;
  #  makepkg -l y -c n $TMP/gcc-$VERSION-$ARCH-$BUILD.txz
  #)

# keep a log:
) 2>&1 | tee gcc.build.log

# Don't ship any .la files:
find $PKG -name "*.la" -exec rm -f "{}" \;

# Strip bloated binaries and libraries:
( cd $PKG
  find . -name "lib*so*" -exec strip --strip-unneeded "{}" \;
  find . -name "lib*so*" -exec patchelf --remove-rpath "{}" \;
  find . -name "lib*a" -exec strip -g "{}" \;
  strip --strip-unneeded usr/bin/* 2> /dev/null
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

( cd $PKG
  if [ -d $PKG/usr/include/c++/$VERSION/i686-slackware-linux -a ! -e $PKG/usr/include/c++/$VERSION/i586-slackware-linux ]; then
    # This symlink will ease the headaches associated with changing our target:
    ln -sf i686-slackware-linux $PKG2/usr/include/c++/$VERSION/i586-slackware-linux
  fi
)

# Final clean up:
( cd $PKG
  rmdir usr/include
  rmdir usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/lib${LIBDIRSUFFIX}
  rm -rf usr/share/locale
  mkdir -p etc/profile.d
  cat $CWD/gcc13.sh > etc/profile.d/gcc13.sh.new
  cat $CWD/gcc13.csh > etc/profile.d/gcc13.csh.new
  cat $CWD/doinst.sh > install/doinst.sh
)

# Generate packages:
( cd $PKG
  makepkg -l y -c n $TMP/${PKGNAM}-${VERSION}${VERTAG}-$ARCH-${BUILD}${TAG}.txz )

echo
echo "Slackware GCC package build complete!"
echo
